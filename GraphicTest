
import tkinter as tk
import sqlite3


class App:
    def __init__(self, root):
        self.root = root
        self.root.geometry("1200x500")
        self.root.title("Leitner Box")
        self.center_window()
        self.current_index = 0
        self.showing_meaning = False

        self.cards = [
            {"word": "apple", "meaning": "سیب"},
            {"word": "book", "meaning": "کتاب"},
            {"word": "cat", "meaning": "گربه"},
            {"word": "sky", "meaning": "آسمان"}
        ]

        self.initialize_ui()
        DataBase()

    def center_window(self):
        self.root.update_idletasks()
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        window_width = self.root.winfo_width()
        window_height = self.root.winfo_height()
        x = (screen_width // 2) - (window_width // 2)
        y = (screen_height // 2) - (window_height // 2) - 40
        self.root.geometry(f"+{x}+{y}")

    def initialize_ui(self):
        self.left_frame = tk.Frame(self.root, bg="#e0e0e0", width=600, height=600)
        self.left_frame.pack(side="left", fill="both", expand=True)

        self.right_frame = tk.Frame(self.root, bg="#ffffff", width=400, height=600)
        self.right_frame.pack(side="right", fill="both")

        self.flashcard = tk.Label(
            self.right_frame,
            text="",
            bg="#fdfdfd",
            fg="#222",
            font=("Arial", 20, "bold"),
            relief="groove",
            bd=2,
            width=20,
            height=4
        )
        self.flashcard.pack(pady=(40, 20))

        btn_frame = tk.Frame(self.right_frame, bg="#ffffff")
        btn_frame.pack(pady=10)

        btn_style = {
            "font": ("Arial", 10, "bold"),
            "bg": "#000000",
            "fg": "white",
            "width": 12,
            "height": 2,
            "bd": 0,
            "activebackground": "#333333"
        }

        self.prev_btn = tk.Button(btn_frame, text="Previous", command=self.prev_card, **btn_style)
        self.prev_btn.grid(row=0, column=0, padx=5)

        self.add_btn = tk.Button(btn_frame, text="Add Word", command=self.add_word, **btn_style)
        self.add_btn.grid(row=0, column=1, padx=5)

        self.meaning_btn = tk.Button(btn_frame, text="Show Meaning", command=self.toggle_meaning, **btn_style)
        self.meaning_btn.grid(row=0, column=2, padx=5)

        self.next_btn = tk.Button(btn_frame, text="Next", command=self.next_card, **btn_style)
        self.next_btn.grid(row=0, column=3, padx=5)

        feedback_frame = tk.Frame(self.right_frame, bg="#ffffff")
        feedback_frame.pack(pady=20)

        fb_style = {
            "font": ("Arial", 10, "bold"),
            "bg": "#000000",
            "fg": "white",
            "width": 14,
            "height": 2,
            "bd": 0,
            "activebackground": "#333333"
        }

        self.knew_btn = tk.Button(feedback_frame, text="I Knew It", command=self.knew_word, **fb_style)
        self.knew_btn.grid(row=0, column=0, padx=10)

        self.didnt_btn = tk.Button(feedback_frame, text="I Didn't Know", command=self.didnt_know_word, **fb_style)
        self.didnt_btn.grid(row=0, column=1, padx=10)

        self.update_flashcard()

    def update_flashcard(self):
        card = self.cards[self.current_index]
        if self.showing_meaning:
            self.flashcard.config(text=card["meaning"])
        else:
            self.flashcard.config(text=card["word"])

    def toggle_meaning(self):
        self.showing_meaning = not self.showing_meaning
        self.update_flashcard()

    def prev_card(self):
        if self.current_index > 0:
            self.current_index -= 1
        self.showing_meaning = False
        self.update_flashcard()

    def next_card(self):
        if self.current_index < len(self.cards) - 1:
            self.current_index += 1
        self.showing_meaning = False
        self.update_flashcard()

    def knew_word(self):
        self.next_card()

    def didnt_know_word(self):
        self.next_card()

    def add_word(self):
        pass


class DataBase:
    def __init__(self):
        self.connection()

    def connection(self):
        conn = sqlite3.connect('mainDataBase.db')
        cursor = conn.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS employees (id INTEGER PRIMARY KEY, name TEXT, salary REAL)"
        )
        conn.commit()
        conn.close()


if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.mainloop()
